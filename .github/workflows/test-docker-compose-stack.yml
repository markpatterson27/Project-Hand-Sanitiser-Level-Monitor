# This is a basic workflow to help you get started with Actions

name: Stack-Integration-Test

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    paths:
      - 'docker-compose-stack/**'
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # # install mosquitto
      # - name: Install mosquitto
      #   run: sudo apt update && sudo apt-get install -y mosquitto

      # install additional software
      - name: Install mosquitto clients and ntpdate
        run: sudo apt update && sudo apt-get install -y mosquitto-clients ntpdate

      # # run mosquitto in verbose mode
      # - name: ReStart mosquitto
      #   run: |
      #     sudo service mosquitto stop
      #     sudo systemctl stop mosquitto.service
      #     mosquitto -d -v -p 1888

      # build and run stack
      - name: Compose up
        run: docker-compose -f "docker-compose-stack/docker-compose.yml" --env-file "docker-compose-stack/.env" up -d --build

      # show running containers
      - name: show running containers
        run: docker ps

      # check that mosquitto can publish a message
      - name: Mosquitto publish
        run: mosquitto_pub -h 127.0.0.1 -p 1883 -u mqtt -P password -t hand-sanitiser-levels/messages -m "hello runner" -d

      # check influxdb
      - name: Check database created in influxdb
        run: docker exec handsanitiserlevelmonitor_influxdb_1 influx -execute "SHOW DATABASES" | grep -q HandSanitiserLevels

      # wait for fowarder
      - name: wait for and check forwarder
        run: mosquitto_sub -h 127.0.0.1 -p 1883 -u mqtt -P password -t hand-sanitiser-levels/messages -C 1 | grep -q Forwarder
      
      # check forwarder forwards messages
      - name: publish sensor readings message
        run: |
          sleep 10
          MESSAGE="{\"meta-data\":{\"device\":\"test\"},\"measures\":{\"sensor1\":5,\"sensor2\":43}}"
          mosquitto_pub -h 127.0.0.1 -p 1883 -u mqtt -P password -t hand-sanitiser-levels/test/sensor-reading -m $MESSAGE -d
          
      - name: Check influxdb sensor-readings table exists
        run: |
          sleep 10
          docker exec handsanitiserlevelmonitor_influxdb_1 influx -database "HandSanitiserLevels" -execute "SHOW MEASUREMENTS" | grep -q sensor-readings

      - name: Check sensor values in influxdb table
        run: |
          docker exec handsanitiserlevelmonitor_influxdb_1 influx -database "HandSanitiserLevels" -execute "SELECT SUM(sensor1) FROM \"2_weeks\".\"sensor-readings\" WHERE device = 'test'" | grep -q 5
          docker exec handsanitiserlevelmonitor_influxdb_1 influx -database "HandSanitiserLevels" -execute "SELECT SUM(sensor2) FROM \"2_weeks\".\"sensor-readings\" WHERE device = 'test'" | grep -q 43

      # check grafana running
      - name: Check grafana cli exists
        run: docker exec handsanitiserlevelmonitor_grafana_1 grafana-cli -v | grep -q "Grafana CLI"

      # check ntp server running
      - name: Check ntp
        run: ntpdate -q 127.0.0.1
    
      # check invalid messages are handled
      - name: Check invalid messages handled
        run: |
          MESSAGE="{}"
          mosquitto_pub -h 127.0.0.1 -p 1883 -u mqtt -P password -t hand-sanitiser-levels/test/sensor-reading -m $MESSAGE -d
          MESSAGE=string
          mosquitto_pub -h 127.0.0.1 -p 1883 -u mqtt -P password -t hand-sanitiser-levels/test/sensor-reading -m $MESSAGE -d
          MESSAGE=7
          mosquitto_pub -h 127.0.0.1 -p 1883 -u mqtt -P password -t hand-sanitiser-levels/test/sensor-reading -m $MESSAGE -d
          MESSAGE="{\"meta-data\":{\"device\":\"test\"}"
          mosquitto_pub -h 127.0.0.1 -p 1883 -u mqtt -P password -t hand-sanitiser-levels/test/sensor-reading -m $MESSAGE -d
          MESSAGE="{\"measures\":{\"sensor1\":51,\"sensor2\":62}"
          mosquitto_pub -h 127.0.0.1 -p 1883 -u mqtt -P password -t hand-sanitiser-levels/test/sensor-reading -m $MESSAGE -d
          mosquitto_pub -h 127.0.0.1 -p 1883 -u mqtt -P password -t hand-sanitiser-levels/test/sensor-reading -n -d
          sleep 5
          MESSAGE="{\"meta-data\":{\"device\":\"test\"},\"measures\":{\"sensor1\":98,\"sensor2\":99}}"
          mosquitto_pub -h 127.0.0.1 -p 1883 -u mqtt -P password -t hand-sanitiser-levels/test/sensor-reading -m $MESSAGE -d
          sleep 10
          docker logs handsanitiserlevelmonitor_forwarder_1
          docker exec handsanitiserlevelmonitor_influxdb_1 influx -database "HandSanitiserLevels" -execute "SELECT LAST(sensor1) FROM \"2_weeks\".\"sensor-readings\" WHERE device = 'test'" | grep -q 98

      # check sql server container running
      - name: Check sqlcmd exists on sql server container
        run: docker exec handsanitiserlevelmonitor_sqlserver_1 /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Strong!Passw0rd -Q "SELECT NAME FROM sys.sysdatabases" | grep -q master

      # check sql database exists
      - name: Check database exists on sql server container
        run: docker exec handsanitiserlevelmonitor_sqlserver_1 /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Strong!Passw0rd -Q "SELECT NAME FROM sys.sysdatabases" | grep -q HandSanitiserLevels

      # check sql table exists
      - name: Check SensorReadings table exists on sql server container
        run: docker exec handsanitiserlevelmonitor_sqlserver_1 /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Strong!Passw0rd -Q "SELECT TABLE_NAME FROM SimpleDB.INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'" | grep -q SensorReadings

      # check data forwards into table
      # only specific payloads are forwarded to sql
      - name: publish sensor readings message for sql db
        run: |
          MESSAGE="{\"meta-data\":{\"device\":\"test\"},\"measures\":{\"capacitance-full-length\":202,\"battery\":4.04}}"
          mosquitto_pub -h 127.0.0.1 -p 1883 -u mqtt -P password -t hand-sanitiser-levels/test/sensor-reading -m $MESSAGE -d

      - name: Check data in sql table
        run: |
          sleep 10
          SQL="SELECT [Id],[Datestamp],[Device],[Location],[Method],[CapacitanceFullLength],[CapacitanceTop],[CapacitanceBottom],[CapacitanceCallibrated],[BatteryLevel] FROM [HandSanitiserLevels].[dbo].[SensorReadings]"
          docker exec handsanitiserlevelmonitor_sqlserver_1 /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Strong!Passw0rd -Q $SQL
      # TODO grep output
